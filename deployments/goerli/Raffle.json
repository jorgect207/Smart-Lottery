{
  "address": "0x515AD34ec683De3C2757215E94a92E71e5B958bA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num_winners",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_s_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "JUST_TwO_NUMBER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_ENOUGHT_MONEY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_OPEN_STATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_SENDIG_STATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_TIME",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "new_ticket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "new_winner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "Buy_lottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "State",
      "outputs": [
        {
          "internalType": "enum Raffle.raffle_State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "address_w",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_address_winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_last_number_winner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "get_num",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_num_winners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_state",
      "outputs": [
        {
          "internalType": "enum Raffle.raffle_State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "get_wallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players_array",
      "outputs": [
        {
          "internalType": "address",
          "name": "address_person",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "number_of",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticket_winner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "address",
          "name": "address_person",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "number_of",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9adb3fe695c470d7612d2bcbafd656c71c9ac70b6968fedde8eb43236ca94603",
  "receipt": {
    "to": null,
    "from": "0x3E8Cb5b3Cd2668451702F6735f538A01afd6034b",
    "contractAddress": "0x515AD34ec683De3C2757215E94a92E71e5B958bA",
    "transactionIndex": 74,
    "gasUsed": "1792764",
    "logsBloom": "0x
    "blockHash": "0x29af93cba8b7e079bae48c8c6f02df6d29f56c60a2d371f0985594ad76f23ab5",
    "transactionHash": "0x9adb3fe695c470d7612d2bcbafd656c71c9ac70b6968fedde8eb43236ca94603",
    "logs": [],
    "blockNumber": 7641226,
    "cumulativeGasUsed": "20719761",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1",
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "0",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "c5b67cf3276bd884fab30d487e3df411",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num_winners\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_s_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JUST_TwO_NUMBER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_ENOUGHT_MONEY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_OPEN_STATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_SENDIG_STATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_TIME\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"new_ticket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"new_winner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"Buy_lottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"State\",\"outputs\":[{\"internalType\":\"enum Raffle.raffle_State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"address_w\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_address_winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_last_number_winner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_num_winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_state\",\"outputs\":[{\"internalType\":\"enum Raffle.raffle_State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players_array\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_person\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket_winner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_person\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n//import \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n//ERROR\\nerror NO_ENOUGHT_MONEY();\\nerror NO_OPEN_STATE();\\nerror NO_SENDIG_STATE();\\nerror NO_TIME();\\nerror JUST_TwO_NUMBER();\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    //modifier\\n    modifier onlyOwner() {\\n        require(msg.sender == s_owner, \\\"you are not owner\\\");\\n        _;\\n    }\\n\\n    //variable get ramdon number\\n\\n    VRFCoordinatorV2Interface private immutable COORDINATOR;\\n\\n    uint64 private s_subscriptionId;\\n    address private vrfCoordinator;\\n    bytes32 private keyHash;\\n\\n    uint32 constant callbackGasLimit = 100000;\\n    uint16 constant requestConfirmations = 3;\\n\\n    uint32 private numWords;\\n\\n    uint256[] public s_randomWords;\\n    uint256 public s_requestId;\\n    address private s_owner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 public interval;\\n\\n    //ENUM\\n    enum raffle_State {\\n        OPEN,\\n        SENDIG\\n    }\\n\\n    //EVENTS\\n    event new_ticket(address buyer);\\n    event new_winner(address winner);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n\\n    //VARIABLES\\n\\n    struct Lottery {\\n        address address_person;\\n        uint256 number_of;\\n    }\\n\\n    mapping(address => uint256) public players;\\n\\n    Lottery[] public players_array;\\n    Lottery[] public winners;\\n\\n    uint256 private time_batch;\\n    raffle_State public State;\\n    address[] public address_w;\\n\\n    uint256 public ticket_winner;\\n    uint256 public number;\\n\\n    constructor(\\n        uint32 num_winners,\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _s_subscriptionId,\\n        uint256 _interval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        State = raffle_State.OPEN;\\n        numWords = num_winners;\\n        vrfCoordinator = _vrfCoordinator;\\n        keyHash = _keyHash;\\n        s_owner = msg.sender;\\n        s_subscriptionId = _s_subscriptionId;\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_lastTimeStamp = block.timestamp;\\n        interval = _interval;\\n    }\\n\\n    //get into the lottery\\n\\n    function Buy_lottery(uint256 _number) external payable {\\n        if (_number <= 1) {\\n            revert JUST_TwO_NUMBER();\\n        }\\n        if (_number >= 99) {\\n            revert JUST_TwO_NUMBER();\\n        }\\n        if (msg.value < 0.01 ether) {\\n            revert NO_ENOUGHT_MONEY();\\n        }\\n        if (raffle_State.OPEN != State) {\\n            revert NO_OPEN_STATE();\\n        }\\n        players_array.push(Lottery({address_person: msg.sender, number_of: _number}));\\n        players[msg.sender] = _number;\\n        emit new_ticket(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (State == raffle_State.OPEN);\\n        bool isTime = ((block.timestamp - s_lastTimeStamp) > interval);\\n        //bool isMoney = (address(this).balance > 0.01 ether);\\n        upkeepNeeded = (isOpen && isTime);\\n    }\\n\\n    //chose a winer gettin a ramdom number\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert NO_TIME();\\n        }\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        State = raffle_State.SENDIG;\\n        emit RequestedRaffleWinner(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_randomWords = randomWords;\\n        ticket_winner = s_randomWords[0] % 99;\\n        send_money();\\n    }\\n\\n    //send the money and restart\\n\\n    function send_money() internal {\\n        if (State != raffle_State.SENDIG) {\\n            revert NO_SENDIG_STATE();\\n        }\\n        uint256 number_of_winners = 0;\\n\\n        for (uint256 i; i < players_array.length; i++) {\\n            if (ticket_winner == players_array[i].number_of) {\\n                number_of_winners += 1;\\n                winners.push(\\n                    Lottery({\\n                        address_person: players_array[i].address_person,\\n                        number_of: players_array[i].number_of\\n                    })\\n                );\\n                address_w.push(players_array[i].address_person);\\n            }\\n            delete players_array[i];\\n        }\\n\\n        for (uint256 i; i < winners.length; i++) {\\n            uint256 value_share = (1 / winners.length) * 10**18;\\n            (bool money, ) = payable(winners[i].address_person).call{value: value_share}(\\\"\\\");\\n            require(money, \\\"ether not send\\\");\\n            emit new_winner(winners[i].address_person);\\n        }\\n        s_lastTimeStamp = block.timestamp;\\n\\n        number = address_w.length - 1;\\n        State = raffle_State.OPEN;\\n    }\\n\\n    function get_num_winners() public view returns (uint256) {\\n        return numWords;\\n    }\\n\\n    function get_address_winner() public view returns (address) {\\n        return address_w[number];\\n    }\\n\\n    function get_last_number_winner() public view returns (uint256) {\\n        return ticket_winner;\\n    }\\n\\n    function get_interval() public view returns (uint256) {\\n        return interval;\\n    }\\n\\n    function get_state() public view returns (raffle_State) {\\n        return State;\\n    }\\n\\n    function get_wallet(uint256 index) public view returns (address) {\\n        return players_array[index].address_person;\\n    }\\n\\n    function get_num(uint256 index) public view returns (uint256) {\\n        return players_array[index].number_of;\\n    }\\n}\\n\",\"keccak256\":\"0xa74db856c485755e0cc30097e398c6d9c69b265935d1ef2d140cd7314a660f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200211638038062002116833981810160405281019062000037919062000364565b600060089054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506000600c60006101000a81548160ff02191690836001811115620000b857620000b7620003ec565b5b021790555084600260006101000a81548163ffffffff021916908363ffffffff16021790555083600060086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600060089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050426006819055508060078190555050505050506200041b565b600080fd5b600063ffffffff82169050919050565b6200021e8162000203565b81146200022a57600080fd5b50565b6000815190506200023e8162000213565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002718262000244565b9050919050565b620002838162000264565b81146200028f57600080fd5b50565b600081519050620002a38162000278565b92915050565b6000819050919050565b620002be81620002a9565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b600067ffffffffffffffff82169050919050565b6200030381620002e4565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b6000819050919050565b6200033e8162000329565b81146200034a57600080fd5b50565b6000815190506200035e8162000333565b92915050565b600080600080600060a08688031215620003835762000382620001fe565b5b600062000393888289016200022d565b9550506020620003a68882890162000292565b9450506040620003b988828901620002cd565b9350506060620003cc8882890162000312565b9250506080620003df888289016200034d565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a051611cce620004486000396000610652015260008181610538015261058c0152611cce6000f3fe60806040526004361061012a5760003560e01c8063947a36fb116100ab578063e6e5c4901161006f578063e6e5c49014610422578063e89e106a1461044d578063f1b6dccd14610478578063f38bc334146104a3578063f42c4ec8146104ce578063f6eaffc8146104f95761012a565b8063947a36fb14610323578063a2fb11751461034e578063da89375c1461038c578063dcbd5416146103c9578063e2eb41ff146103e55761012a565b806376febb7e116100f257806376febb7e1461022757806381866600146102645780638381f58a1461028f57806386b301ad146102ba57806394743539146102e55761012a565b80631fe543e31461012f5780632d668845146101585780634585e33b146101835780636e04ff0d146101ac5780637227d097146101ea575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906113e7565b610536565b005b34801561016457600080fd5b5061016d6105f6565b60405161017a9190611452565b60405180910390f35b34801561018f57600080fd5b506101aa60048036038101906101a591906114c8565b6105fc565b005b3480156101b857600080fd5b506101d360048036038101906101ce91906115ca565b610794565b6040516101e19291906116b6565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906116e6565b6107fb565b60405161021e9190611754565b60405180910390f35b34801561023357600080fd5b5061024e600480360381019061024991906116e6565b61083a565b60405161025b9190611452565b60405180910390f35b34801561027057600080fd5b50610279610869565b6040516102869190611754565b60405180910390f35b34801561029b57600080fd5b506102a46108b1565b6040516102b19190611452565b60405180910390f35b3480156102c657600080fd5b506102cf6108b7565b6040516102dc91906117e6565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906116e6565b6108ce565b60405161031a929190611801565b60405180910390f35b34801561032f57600080fd5b50610338610922565b6040516103459190611452565b60405180910390f35b34801561035a57600080fd5b50610375600480360381019061037091906116e6565b610928565b604051610383929190611801565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906116e6565b61097c565b6040516103c09190611754565b60405180910390f35b6103e360048036038101906103de91906116e6565b6109cb565b005b3480156103f157600080fd5b5061040c60048036038101906104079190611856565b610c14565b6040516104199190611452565b60405180910390f35b34801561042e57600080fd5b50610437610c2c565b6040516104449190611452565b60405180910390f35b34801561045957600080fd5b50610462610c4c565b60405161046f9190611452565b60405180910390f35b34801561048457600080fd5b5061048d610c52565b60405161049a91906117e6565b60405180910390f35b3480156104af57600080fd5b506104b8610c65565b6040516104c59190611452565b60405180910390f35b3480156104da57600080fd5b506104e3610c6f565b6040516104f09190611452565b60405180910390f35b34801561050557600080fd5b50610520600480360381019061051b91906116e6565b610c79565b60405161052d9190611452565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105df929190611883565b60405180910390fd5b6105f28282610c9d565b5050565b600e5481565b600061061660405180602001604052806000815250610794565b50905080610650576040517fdbd2220a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d3060015460008054906101000a900467ffffffffffffffff166003620186a0600260009054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016106dd959493929190611924565b602060405180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f919061198c565b6004819055506001600c60006101000a81548160ff0219169083600181111561075b5761075a61176f565b5b02179055506004547fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000606060008060018111156107ad576107ac61176f565b5b600c60009054906101000a900460ff1660018111156107cf576107ce61176f565b5b1490506000600754600654426107e591906119e8565b1190508180156107f25750805b93505050915091565b600d818154811061080b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600982815481106108505761084f611a1c565b5b9060005260206000209060020201600101549050919050565b6000600d600f548154811061088157610880611a1c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600f5481565b6000600c60009054906101000a900460ff16905090565b600981815481106108de57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60075481565b600a818154811061093857600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60006009828154811061099257610991611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60018111610a05576040517f20cc5f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60638110610a3f576040517f20cc5f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc10000341015610a80576040517f6a6df4c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c60009054906101000a900460ff166001811115610aa257610aa161176f565b5b60006001811115610ab657610ab561176f565b5b14610aed576040517fc9bcc82e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f87bbcb76ca2a0acf0732f7cddafc17b54b6efda4a5d6682f1f677c9bfb8d990f33604051610c099190611754565b60405180910390a150565b60086020528060005260406000206000915090505481565b6000600260009054906101000a900463ffffffff1663ffffffff16905090565b60045481565b600c60009054906101000a900460ff1681565b6000600e54905090565b6000600754905090565b60038181548110610c8957600080fd5b906000526020600020016000915090505481565b8060039080519060200190610cb39291906111da565b5060636003600081548110610ccb57610cca611a1c565b5b9060005260206000200154610ce09190611a7a565b600e81905550610cee610cf2565b5050565b600180811115610d0557610d0461176f565b5b600c60009054906101000a900460ff166001811115610d2757610d2661176f565b5b14610d5e576040517fb4eb319700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b600980549050811015610fd05760098181548110610d8357610d82611a1c565b5b906000526020600020906002020160010154600e541415610f6957600182610dab9190611aab565b9150600a604051806040016040528060098481548110610dce57610dcd611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098481548110610e2f57610e2e611a1c565b5b906000526020600020906002020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600d60098281548110610ed657610ed5611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60098181548110610f7d57610f7c611a1c565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550508080610fc890611b01565b915050610d62565b5060005b600a8054905081101561118c576000670de0b6b3a7640000600a805490506001610ffe9190611b4a565b6110089190611b7b565b90506000600a83815481106110205761101f611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161107590611c06565b60006040518083038185875af1925050503d80600081146110b2576040519150601f19603f3d011682016040523d82523d6000602084013e6110b7565b606091505b50509050806110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290611c78565b60405180910390fd5b7f2fb5676af721f279a52b33d9ae31f5cc54234b3d4b5495e3d34e64acffb326cb600a84815481106111305761112f611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161116f9190611754565b60405180910390a15050808061118490611b01565b915050610fd4565b50426006819055506001600d805490506111a691906119e8565b600f819055506000600c60006101000a81548160ff021916908360018111156111d2576111d161176f565b5b021790555050565b828054828255906000526020600020908101928215611216579160200282015b828111156112155782518255916020019190600101906111fa565b5b5090506112239190611227565b5090565b5b80821115611240576000816000905550600101611228565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61126b81611258565b811461127657600080fd5b50565b60008135905061128881611262565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112dc82611293565b810181811067ffffffffffffffff821117156112fb576112fa6112a4565b5b80604052505050565b600061130e611244565b905061131a82826112d3565b919050565b600067ffffffffffffffff82111561133a576113396112a4565b5b602082029050602081019050919050565b600080fd5b600061136361135e8461131f565b611304565b905080838252602082019050602084028301858111156113865761138561134b565b5b835b818110156113af578061139b8882611279565b845260208401935050602081019050611388565b5050509392505050565b600082601f8301126113ce576113cd61128e565b5b81356113de848260208601611350565b91505092915050565b600080604083850312156113fe576113fd61124e565b5b600061140c85828601611279565b925050602083013567ffffffffffffffff81111561142d5761142c611253565b5b611439858286016113b9565b9150509250929050565b61144c81611258565b82525050565b60006020820190506114676000830184611443565b92915050565b600080fd5b60008083601f8401126114885761148761128e565b5b8235905067ffffffffffffffff8111156114a5576114a461146d565b5b6020830191508360018202830111156114c1576114c061134b565b5b9250929050565b600080602083850312156114df576114de61124e565b5b600083013567ffffffffffffffff8111156114fd576114fc611253565b5b61150985828601611472565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115611535576115346112a4565b5b61153e82611293565b9050602081019050919050565b82818337600083830152505050565b600061156d6115688461151a565b611304565b90508281526020810184848401111561158957611588611515565b5b61159484828561154b565b509392505050565b600082601f8301126115b1576115b061128e565b5b81356115c184826020860161155a565b91505092915050565b6000602082840312156115e0576115df61124e565b5b600082013567ffffffffffffffff8111156115fe576115fd611253565b5b61160a8482850161159c565b91505092915050565b60008115159050919050565b61162881611613565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561166857808201518184015260208101905061164d565b83811115611677576000848401525b50505050565b60006116888261162e565b6116928185611639565b93506116a281856020860161164a565b6116ab81611293565b840191505092915050565b60006040820190506116cb600083018561161f565b81810360208301526116dd818461167d565b90509392505050565b6000602082840312156116fc576116fb61124e565b5b600061170a84828501611279565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061173e82611713565b9050919050565b61174e81611733565b82525050565b60006020820190506117696000830184611745565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106117af576117ae61176f565b5b50565b60008190506117c08261179e565b919050565b60006117d0826117b2565b9050919050565b6117e0816117c5565b82525050565b60006020820190506117fb60008301846117d7565b92915050565b60006040820190506118166000830185611745565b6118236020830184611443565b9392505050565b61183381611733565b811461183e57600080fd5b50565b6000813590506118508161182a565b92915050565b60006020828403121561186c5761186b61124e565b5b600061187a84828501611841565b91505092915050565b60006040820190506118986000830185611745565b6118a56020830184611745565b9392505050565b6000819050919050565b6118bf816118ac565b82525050565b600067ffffffffffffffff82169050919050565b6118e2816118c5565b82525050565b600061ffff82169050919050565b6118ff816118e8565b82525050565b600063ffffffff82169050919050565b61191e81611905565b82525050565b600060a08201905061193960008301886118b6565b61194660208301876118d9565b61195360408301866118f6565b6119606060830185611915565b61196d6080830184611915565b9695505050505050565b60008151905061198681611262565b92915050565b6000602082840312156119a2576119a161124e565b5b60006119b084828501611977565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119f382611258565b91506119fe83611258565b925082821015611a1157611a106119b9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a8582611258565b9150611a9083611258565b925082611aa057611a9f611a4b565b5b828206905092915050565b6000611ab682611258565b9150611ac183611258565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611af657611af56119b9565b5b828201905092915050565b6000611b0c82611258565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b3f57611b3e6119b9565b5b600182019050919050565b6000611b5582611258565b9150611b6083611258565b925082611b7057611b6f611a4b565b5b828204905092915050565b6000611b8682611258565b9150611b9183611258565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bca57611bc96119b9565b5b828202905092915050565b600081905092915050565b50565b6000611bf0600083611bd5565b9150611bfb82611be0565b600082019050919050565b6000611c1182611be3565b9150819050919050565b600082825260208201905092915050565b7f6574686572206e6f742073656e64000000000000000000000000000000000000600082015250565b6000611c62600e83611c1b565b9150611c6d82611c2c565b602082019050919050565b60006020820190508181036000830152611c9181611c55565b905091905056fea2646970667358221220f10399b50ca838ba6be6d72fbf6e6ab76f34746c9fe64151e9f8e4e51ac45ed564736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063947a36fb116100ab578063e6e5c4901161006f578063e6e5c49014610422578063e89e106a1461044d578063f1b6dccd14610478578063f38bc334146104a3578063f42c4ec8146104ce578063f6eaffc8146104f95761012a565b8063947a36fb14610323578063a2fb11751461034e578063da89375c1461038c578063dcbd5416146103c9578063e2eb41ff146103e55761012a565b806376febb7e116100f257806376febb7e1461022757806381866600146102645780638381f58a1461028f57806386b301ad146102ba57806394743539146102e55761012a565b80631fe543e31461012f5780632d668845146101585780634585e33b146101835780636e04ff0d146101ac5780637227d097146101ea575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906113e7565b610536565b005b34801561016457600080fd5b5061016d6105f6565b60405161017a9190611452565b60405180910390f35b34801561018f57600080fd5b506101aa60048036038101906101a591906114c8565b6105fc565b005b3480156101b857600080fd5b506101d360048036038101906101ce91906115ca565b610794565b6040516101e19291906116b6565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906116e6565b6107fb565b60405161021e9190611754565b60405180910390f35b34801561023357600080fd5b5061024e600480360381019061024991906116e6565b61083a565b60405161025b9190611452565b60405180910390f35b34801561027057600080fd5b50610279610869565b6040516102869190611754565b60405180910390f35b34801561029b57600080fd5b506102a46108b1565b6040516102b19190611452565b60405180910390f35b3480156102c657600080fd5b506102cf6108b7565b6040516102dc91906117e6565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906116e6565b6108ce565b60405161031a929190611801565b60405180910390f35b34801561032f57600080fd5b50610338610922565b6040516103459190611452565b60405180910390f35b34801561035a57600080fd5b50610375600480360381019061037091906116e6565b610928565b604051610383929190611801565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906116e6565b61097c565b6040516103c09190611754565b60405180910390f35b6103e360048036038101906103de91906116e6565b6109cb565b005b3480156103f157600080fd5b5061040c60048036038101906104079190611856565b610c14565b6040516104199190611452565b60405180910390f35b34801561042e57600080fd5b50610437610c2c565b6040516104449190611452565b60405180910390f35b34801561045957600080fd5b50610462610c4c565b60405161046f9190611452565b60405180910390f35b34801561048457600080fd5b5061048d610c52565b60405161049a91906117e6565b60405180910390f35b3480156104af57600080fd5b506104b8610c65565b6040516104c59190611452565b60405180910390f35b3480156104da57600080fd5b506104e3610c6f565b6040516104f09190611452565b60405180910390f35b34801561050557600080fd5b50610520600480360381019061051b91906116e6565b610c79565b60405161052d9190611452565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105df929190611883565b60405180910390fd5b6105f28282610c9d565b5050565b600e5481565b600061061660405180602001604052806000815250610794565b50905080610650576040517fdbd2220a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d3060015460008054906101000a900467ffffffffffffffff166003620186a0600260009054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016106dd959493929190611924565b602060405180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f919061198c565b6004819055506001600c60006101000a81548160ff0219169083600181111561075b5761075a61176f565b5b02179055506004547fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000606060008060018111156107ad576107ac61176f565b5b600c60009054906101000a900460ff1660018111156107cf576107ce61176f565b5b1490506000600754600654426107e591906119e8565b1190508180156107f25750805b93505050915091565b600d818154811061080b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600982815481106108505761084f611a1c565b5b9060005260206000209060020201600101549050919050565b6000600d600f548154811061088157610880611a1c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600f5481565b6000600c60009054906101000a900460ff16905090565b600981815481106108de57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60075481565b600a818154811061093857600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60006009828154811061099257610991611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60018111610a05576040517f20cc5f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60638110610a3f576040517f20cc5f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc10000341015610a80576040517f6a6df4c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c60009054906101000a900460ff166001811115610aa257610aa161176f565b5b60006001811115610ab657610ab561176f565b5b14610aed576040517fc9bcc82e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f87bbcb76ca2a0acf0732f7cddafc17b54b6efda4a5d6682f1f677c9bfb8d990f33604051610c099190611754565b60405180910390a150565b60086020528060005260406000206000915090505481565b6000600260009054906101000a900463ffffffff1663ffffffff16905090565b60045481565b600c60009054906101000a900460ff1681565b6000600e54905090565b6000600754905090565b60038181548110610c8957600080fd5b906000526020600020016000915090505481565b8060039080519060200190610cb39291906111da565b5060636003600081548110610ccb57610cca611a1c565b5b9060005260206000200154610ce09190611a7a565b600e81905550610cee610cf2565b5050565b600180811115610d0557610d0461176f565b5b600c60009054906101000a900460ff166001811115610d2757610d2661176f565b5b14610d5e576040517fb4eb319700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b600980549050811015610fd05760098181548110610d8357610d82611a1c565b5b906000526020600020906002020160010154600e541415610f6957600182610dab9190611aab565b9150600a604051806040016040528060098481548110610dce57610dcd611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098481548110610e2f57610e2e611a1c565b5b906000526020600020906002020160010154815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600d60098281548110610ed657610ed5611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60098181548110610f7d57610f7c611a1c565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550508080610fc890611b01565b915050610d62565b5060005b600a8054905081101561118c576000670de0b6b3a7640000600a805490506001610ffe9190611b4a565b6110089190611b7b565b90506000600a83815481106110205761101f611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161107590611c06565b60006040518083038185875af1925050503d80600081146110b2576040519150601f19603f3d011682016040523d82523d6000602084013e6110b7565b606091505b50509050806110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290611c78565b60405180910390fd5b7f2fb5676af721f279a52b33d9ae31f5cc54234b3d4b5495e3d34e64acffb326cb600a84815481106111305761112f611a1c565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161116f9190611754565b60405180910390a15050808061118490611b01565b915050610fd4565b50426006819055506001600d805490506111a691906119e8565b600f819055506000600c60006101000a81548160ff021916908360018111156111d2576111d161176f565b5b021790555050565b828054828255906000526020600020908101928215611216579160200282015b828111156112155782518255916020019190600101906111fa565b5b5090506112239190611227565b5090565b5b80821115611240576000816000905550600101611228565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61126b81611258565b811461127657600080fd5b50565b60008135905061128881611262565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112dc82611293565b810181811067ffffffffffffffff821117156112fb576112fa6112a4565b5b80604052505050565b600061130e611244565b905061131a82826112d3565b919050565b600067ffffffffffffffff82111561133a576113396112a4565b5b602082029050602081019050919050565b600080fd5b600061136361135e8461131f565b611304565b905080838252602082019050602084028301858111156113865761138561134b565b5b835b818110156113af578061139b8882611279565b845260208401935050602081019050611388565b5050509392505050565b600082601f8301126113ce576113cd61128e565b5b81356113de848260208601611350565b91505092915050565b600080604083850312156113fe576113fd61124e565b5b600061140c85828601611279565b925050602083013567ffffffffffffffff81111561142d5761142c611253565b5b611439858286016113b9565b9150509250929050565b61144c81611258565b82525050565b60006020820190506114676000830184611443565b92915050565b600080fd5b60008083601f8401126114885761148761128e565b5b8235905067ffffffffffffffff8111156114a5576114a461146d565b5b6020830191508360018202830111156114c1576114c061134b565b5b9250929050565b600080602083850312156114df576114de61124e565b5b600083013567ffffffffffffffff8111156114fd576114fc611253565b5b61150985828601611472565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115611535576115346112a4565b5b61153e82611293565b9050602081019050919050565b82818337600083830152505050565b600061156d6115688461151a565b611304565b90508281526020810184848401111561158957611588611515565b5b61159484828561154b565b509392505050565b600082601f8301126115b1576115b061128e565b5b81356115c184826020860161155a565b91505092915050565b6000602082840312156115e0576115df61124e565b5b600082013567ffffffffffffffff8111156115fe576115fd611253565b5b61160a8482850161159c565b91505092915050565b60008115159050919050565b61162881611613565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561166857808201518184015260208101905061164d565b83811115611677576000848401525b50505050565b60006116888261162e565b6116928185611639565b93506116a281856020860161164a565b6116ab81611293565b840191505092915050565b60006040820190506116cb600083018561161f565b81810360208301526116dd818461167d565b90509392505050565b6000602082840312156116fc576116fb61124e565b5b600061170a84828501611279565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061173e82611713565b9050919050565b61174e81611733565b82525050565b60006020820190506117696000830184611745565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106117af576117ae61176f565b5b50565b60008190506117c08261179e565b919050565b60006117d0826117b2565b9050919050565b6117e0816117c5565b82525050565b60006020820190506117fb60008301846117d7565b92915050565b60006040820190506118166000830185611745565b6118236020830184611443565b9392505050565b61183381611733565b811461183e57600080fd5b50565b6000813590506118508161182a565b92915050565b60006020828403121561186c5761186b61124e565b5b600061187a84828501611841565b91505092915050565b60006040820190506118986000830185611745565b6118a56020830184611745565b9392505050565b6000819050919050565b6118bf816118ac565b82525050565b600067ffffffffffffffff82169050919050565b6118e2816118c5565b82525050565b600061ffff82169050919050565b6118ff816118e8565b82525050565b600063ffffffff82169050919050565b61191e81611905565b82525050565b600060a08201905061193960008301886118b6565b61194660208301876118d9565b61195360408301866118f6565b6119606060830185611915565b61196d6080830184611915565b9695505050505050565b60008151905061198681611262565b92915050565b6000602082840312156119a2576119a161124e565b5b60006119b084828501611977565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119f382611258565b91506119fe83611258565b925082821015611a1157611a106119b9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a8582611258565b9150611a9083611258565b925082611aa057611a9f611a4b565b5b828206905092915050565b6000611ab682611258565b9150611ac183611258565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611af657611af56119b9565b5b828201905092915050565b6000611b0c82611258565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b3f57611b3e6119b9565b5b600182019050919050565b6000611b5582611258565b9150611b6083611258565b925082611b7057611b6f611a4b565b5b828204905092915050565b6000611b8682611258565b9150611b9183611258565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bca57611bc96119b9565b5b828202905092915050565b600081905092915050565b50565b6000611bf0600083611bd5565b9150611bfb82611be0565b600082019050919050565b6000611c1182611be3565b9150819050919050565b600082825260208201905092915050565b7f6574686572206e6f742073656e64000000000000000000000000000000000000600082015250565b6000611c62600e83611c1b565b9150611c6d82611c2c565b602082019050919050565b60006020820190508181036000830152611c9181611c55565b905091905056fea2646970667358221220f10399b50ca838ba6be6d72fbf6e6ab76f34746c9fe64151e9f8e4e51ac45ed564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 201,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 203,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "vrfCoordinator",
        "offset": 8,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 205,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "keyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 213,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "numWords",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 216,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_randomWords",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_requestId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 222,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "interval",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 248,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "players",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 252,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "players_array",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Lottery)244_storage)dyn_storage"
      },
      {
        "astId": 256,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "winners",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Lottery)244_storage)dyn_storage"
      },
      {
        "astId": 258,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "time_batch",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 261,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "State",
        "offset": 0,
        "slot": "12",
        "type": "t_enum(raffle_State)227"
      },
      {
        "astId": 264,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "address_w",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 266,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "ticket_winner",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 268,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "number",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Lottery)244_storage)dyn_storage": {
        "base": "t_struct(Lottery)244_storage",
        "encoding": "dynamic_array",
        "label": "struct Raffle.Lottery[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(raffle_State)227": {
        "encoding": "inplace",
        "label": "enum Raffle.raffle_State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Lottery)244_storage": {
        "encoding": "inplace",
        "label": "struct Raffle.Lottery",
        "members": [
          {
            "astId": 241,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "address_person",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 243,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "number_of",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}